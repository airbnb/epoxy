import org.gradle.internal.jvm.Jvm

apply plugin: 'com.android.library'
apply from: 'build.workaround-missing-resource.gradle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
  compileSdkVersion rootProject.COMPILE_SDK_VERSION

  defaultConfig {
    minSdkVersion rootProject.MIN_SDK_VERSION
    targetSdkVersion rootProject.TARGET_SDK_VERSION

    javaCompileOptions {
      annotationProcessorOptions {
        includeCompileClasspath false
      }
    }
  }

  dataBinding {
    enabled = true
  }

  defaultConfig.javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true
}

dependencies {
  implementation rootProject.deps.kotlin
  implementation rootProject.deps.androidRecyclerView
  implementation project(':epoxy-annotations')
  implementation project(':epoxy-adapter')
  implementation project(':epoxy-databinding')
  implementation project(':epoxy-processortest2')

  kapt project(':epoxy-processor')
  // Need to include the processor directly since we create an instance of it in code for testing
  testImplementation project(':epoxy-processor')

  implementation rootProject.deps.paris
  kapt rootProject.deps.parisProcessor
  // Need to include the processor directly since we create an instance of it in code for testing
  testImplementation rootProject.deps.parisProcessor

  kapt rootProject.deps.autoValue

  testImplementation files(getRuntimeJar())
  testImplementation files(Jvm.current().getToolsJar())
  testImplementation rootProject.deps.googleTestingCompile
}

static def getRuntimeJar() {
  try {
    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile()
    File runtimeJar = new File(javaBase, "lib/rt.jar")
    if (runtimeJar.exists()) {
      return runtimeJar
    }
    runtimeJar = new File(javaBase, "jre/lib/rt.jar")
    return runtimeJar.exists() ? runtimeJar : null
  } catch (IOException e) {
    throw new RuntimeException(e)
  }
}

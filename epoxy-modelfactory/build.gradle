import org.gradle.internal.jvm.Jvm

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply from: rootProject.file('gradle/build.workaround-missing-resource.gradle')

android {
  compileSdkVersion rootProject.COMPILE_SDK_VERSION

  defaultConfig {
    minSdkVersion rootProject.MIN_SDK_VERSION
    targetSdkVersion rootProject.TARGET_SDK_VERSION
  }
}

configurations.all { strategy ->
  strategy.resolutionStrategy.force rootProject.deps.junit, rootProject.deps.robolectric,
      rootProject.deps.mockito
}

dependencies {
  implementation project(':epoxy-adapter')
  implementation rootProject.deps.paris
  implementation rootProject.deps.kotlin
  implementation rootProject.deps.androidRecyclerView

  kapt project(':epoxy-processor')

  // Need to include the processors directly since we create an instance of it in code for testing
  testImplementation project(':epoxy-processor')
  testImplementation rootProject.deps.parisProcessor

  testImplementation project(':epoxy-processortest')
  testImplementation rootProject.deps.googleTestingCompile
  testImplementation rootProject.deps.junit
  testImplementation rootProject.deps.robolectric
  testImplementation files(getRuntimeJar())
  testImplementation files(Jvm.current().getToolsJar())
}

// Javadoc isn't working well with Kotlin :(
tasks.withType(Javadoc).all { enabled = false }

static def getRuntimeJar() {
  try {
    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile()
    File runtimeJar = new File(javaBase, "lib/rt.jar")
    if (runtimeJar.exists()) {
      return runtimeJar
    }
    runtimeJar = new File(javaBase, "jre/lib/rt.jar")
    return runtimeJar.exists() ? runtimeJar : null
  } catch (IOException e) {
    throw new RuntimeException(e)
  }
}

apply from: rootProject.file('gradle/gradle-maven-push.gradle')
